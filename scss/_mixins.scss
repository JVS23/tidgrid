//
//  _mixins.scss
//

@mixin child-col() {
  & > .col {
    @content;
  }
}

@mixin gap($size) {
  margin-top: -$size;
  margin-left: -$size;

  > *:not(.break) {
    padding-top: $size;
    padding-left: $size;
  }
}

@mixin gap-h($size) {
  margin-left: -$size;

  > *:not(.break) {
    padding-left: $size;
  }
}

@mixin gap-v($size) {
  margin-top: -$size;

  > *:not(.break) {
    padding-top: $size;
  }
}

$breakpoint-name: null;
$breakpoint-size: null;
@mixin each-breakpoint() {
  $breakpoints: map-merge(
    (
      base: 0,
    ),
    $breakpoints
  );
  @each $name, $size in $breakpoints {
    $breakpoint-size: $size !global;
    @if $name == base {
      $breakpoint-name: "" !global;
      @content;
    } @else {
      $breakpoint-name: $breakpoint-separator + $name !global;
      @media only screen and (min-width: $size) {
        @content();
      }
    }
  }
}

@mixin each-column() {
  @for $column from 0 through $columns {
    @content ($column);
  }
}

@mixin property($property) {
  &.#{$property}#{$breakpoint-name} {
    @content;
  }
}

@mixin global-property($property) {
  .#{$property}#{$breakpoint-name} {
    @content;
  }
}

@mixin min-viewport($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin container-margin($margin) {
  width: calc(100% - #{$margin} * 2);
}


@mixin col-auto() {
  flex: 1 0 0;
}

@mixin col-wide() {
  flex: none;
  width: 100%,
}

@mixin col-shrink() {
  flex: 0 1 0;
  width: unset;
}

@mixin col-narrow() {
  flex: none;
  max-width: 100%;
  width: unset;
}

@mixin col-span($width) {
  flex: none;
  width: $width;
}

@mixin col-offset($width) {
  margin-left: $width;
}

@mixin col-move($position) {
  @if $position == first {
    order: -2;
    
    & + .break {
      order: -1;
    }
  } @else {
    order: 2;
  
    & + .break {
      order: 1;
    }
  }
}

@mixin sm() {
  @include min-viewport(map-get($breakpoints, sm)) {
    @content;
  }
}

@mixin md() {
  @include min-viewport(map-get($breakpoints, md)) {
    @content;
  }
}

@mixin lg() {
  @include min-viewport(map-get($breakpoints, lg)) {
    @content;
  }
}

@mixin xl() {
  @include min-viewport(map-get($breakpoints, xl)) {
    @content;
  }
}

@mixin create-button(
  $background-color,
  $foreground-color,
  $hover-color: $background-color,
  $active-color: $background-color,
  $focus-color: $background-color,
  $hover-darken-amount: $button-hover-darken-amount,
  $active-darken-amount: $button-active-darken-amount,
  $focus-transparency: $button-focus-transparency,
  $create-outlined: true,
  $border-color: $background-color,
  $outlined-background-color: $foreground-color,
  $outlined-foreground-color: $background-color
) {
  background-color: $background-color;
  color: $foreground-color;

  &:not([disabled]):hover {
    background-color: darken($hover-color, $hover-darken-amount);
  }

  &:active {
    background-color: darken($active-color, $active-darken-amount) !important;
  }

  &:focus {
    box-shadow: 0 0 0 0.2em transparentize($focus-color, $focus-transparency);
  }

  @if $create-outlined == true {
    &.button-outlined {
      border-color: $border-color;
      background-color: $outlined-background-color;
      color: $outlined-foreground-color;

      &:not([disabled]):hover {
        background-color: $background-color;
        color: $foreground-color;
      }

      &:active {
        color: $foreground-color;
      }
    }
  }
}
